/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef CLABWIFIRADIOSTATSTABLE_H
#define CLABWIFIRADIOSTATSTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>
#if 0
/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(CLAB-WIFI-MIB)
config_require(CLAB-WIFI-MIB/clabWIFIRadioStatsTable/clabWIFIRadioStatsTable_interface)
config_require(CLAB-WIFI-MIB/clabWIFIRadioStatsTable/clabWIFIRadioStatsTable_data_access)
config_require(CLAB-WIFI-MIB/clabWIFIRadioStatsTable/clabWIFIRadioStatsTable_data_get)
config_require(CLAB-WIFI-MIB/clabWIFIRadioStatsTable/clabWIFIRadioStatsTable_data_set)
    /* *INDENT-ON*  */
#endif
/* OID and column number definitions for clabWIFIRadioStatsTable */
#include "clabWIFIRadioStatsTable_oids.h"

/* enum definions */
#include "clabWIFIRadioStatsTable_enums.h"
#if 0
/* *********************************************************************
 * function declarations
 */
void init_clabWIFIRadioStatsTable(void);
void shutdown_clabWIFIRadioStatsTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table clabWIFIRadioStatsTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * CLAB-WIFI-MIB::clabWIFIRadioStatsTable is subid 3 of clabWIFIObjects.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.4491.2.5.1.1.3, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review clabWIFIRadioStatsTable registration context.
     */
typedef netsnmp_data_list clabWIFIRadioStatsTable_registration;
#endif
/**********************************************************************/
/*
 * TODO:110:r: |-> Review clabWIFIRadioStatsTable data context structure.
 * This structure is used to represent the data for clabWIFIRadioStatsTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * clabWIFIRadioStatsTable.
 */
typedef struct clabWIFIRadioStatsTable_data_s {
    
        /*
         * clabWIFIRadioStatsBytesSent(1)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/W/e/r/d/h
         */
   U64   clabWIFIRadioStatsBytesSent;
    
        /*
         * clabWIFIRadioStatsBytesReceived(2)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/W/e/r/d/h
         */
   U64   clabWIFIRadioStatsBytesReceived;
    
        /*
         * clabWIFIRadioStatsPacketsSent(3)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/W/e/r/d/h
         */
   U64   clabWIFIRadioStatsPacketsSent;
    
        /*
         * clabWIFIRadioStatsPacketsReceived(4)/COUNTER64/ASN_COUNTER64/U64(U64)//l/A/W/e/r/d/h
         */
   U64   clabWIFIRadioStatsPacketsReceived;
    
        /*
         * clabWIFIRadioStatsErrorsSent(5)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   clabWIFIRadioStatsErrorsSent;
    
        /*
         * clabWIFIRadioStatsErrorsReceived(6)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   clabWIFIRadioStatsErrorsReceived;
    
        /*
         * clabWIFIRadioStatsDiscardPacketsSent(7)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   clabWIFIRadioStatsDiscardPacketsSent;
    
        /*
         * clabWIFIRadioStatsDiscardPacketsReceived(8)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   clabWIFIRadioStatsDiscardPacketsReceived;
    
} clabWIFIRadioStatsTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review clabWIFIRadioStatsTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef clabWIFIRadioStatsTable_data clabWIFIRadioStatsTable_undo_data;

/*
 * TODO:120:r: |-> Review clabWIFIRadioStatsTable mib index.
 * This structure is used to represent the index for clabWIFIRadioStatsTable.
 */
typedef struct clabWIFIRadioStatsTable_mib_index_s {

        /*
         * clabWIFIRadioId(1)/InterfaceIndex/ASN_INTEGER/long(long)//l/a/w/e/R/d/H
         */
   long   clabWIFIRadioId;


} clabWIFIRadioStatsTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review clabWIFIRadioStatsTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_clabWIFIRadioStatsTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review clabWIFIRadioStatsTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * clabWIFIRadioStatsTable_rowreq_ctx pointer.
 */
typedef struct clabWIFIRadioStatsTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_clabWIFIRadioStatsTable_IDX_LEN];
    
    clabWIFIRadioStatsTable_mib_index        tbl_idx;
    
    clabWIFIRadioStatsTable_data              data;
    clabWIFIRadioStatsTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to clabWIFIRadioStatsTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *clabWIFIRadioStatsTable_data_list;

} clabWIFIRadioStatsTable_rowreq_ctx;
#if 0
typedef struct clabWIFIRadioStatsTable_ref_rowreq_ctx_s {
    clabWIFIRadioStatsTable_rowreq_ctx *rowreq_ctx;
} clabWIFIRadioStatsTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int clabWIFIRadioStatsTable_pre_request(clabWIFIRadioStatsTable_registration * user_context);
    int clabWIFIRadioStatsTable_post_request(clabWIFIRadioStatsTable_registration * user_context,
        int rc);

    int clabWIFIRadioStatsTable_rowreq_ctx_init(clabWIFIRadioStatsTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void clabWIFIRadioStatsTable_rowreq_ctx_cleanup(clabWIFIRadioStatsTable_rowreq_ctx *rowreq_ctx);

    int clabWIFIRadioStatsTable_commit(clabWIFIRadioStatsTable_rowreq_ctx * rowreq_ctx);

    clabWIFIRadioStatsTable_rowreq_ctx *
                  clabWIFIRadioStatsTable_row_find_by_mib_index(clabWIFIRadioStatsTable_mib_index *mib_idx);

extern const oid clabWIFIRadioStatsTable_oid[];
extern const int clabWIFIRadioStatsTable_oid_size;


#include "clabWIFIRadioStatsTable_interface.h"
#include "clabWIFIRadioStatsTable_data_access.h"
#include "clabWIFIRadioStatsTable_data_get.h"
#endif
#include "clabWIFIRadioStatsTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* CLABWIFIRADIOSTATSTABLE_H */
/** @} */
