/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef WIFIBSSWPATABLE_H
#define WIFIBSSWPATABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>
#if 0
/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(BRCM-WIFI-MGMT-MIB)
config_require(BRCM-WIFI-MGMT-MIB/wifiBssWpaTable/wifiBssWpaTable_interface)
config_require(BRCM-WIFI-MGMT-MIB/wifiBssWpaTable/wifiBssWpaTable_data_access)
config_require(BRCM-WIFI-MGMT-MIB/wifiBssWpaTable/wifiBssWpaTable_data_get)
config_require(BRCM-WIFI-MGMT-MIB/wifiBssWpaTable/wifiBssWpaTable_data_set)
    /* *INDENT-ON*  */
#endif
/* OID and column number definitions for wifiBssWpaTable */
#include "wifiBssWpaTable_oids.h"

/* enum definions */
#include "wifiBssWpaTable_enums.h"
#if 0
/* *********************************************************************
 * function declarations
 */
void init_wifiBssWpaTable(void);
void shutdown_wifiBssWpaTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table wifiBssWpaTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * BRCM-WIFI-MGMT-MIB::wifiBssWpaTable is subid 4 of wifiMbssSecurity.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.4413.2.2.2.1.18.1.2.3.4, length: 16
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review wifiBssWpaTable registration context.
     */
typedef netsnmp_data_list wifiBssWpaTable_registration;
#endif
/**********************************************************************/
/*
 * TODO:110:r: |-> Review wifiBssWpaTable data context structure.
 * This structure is used to represent the data for wifiBssWpaTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * wifiBssWpaTable.
 */
typedef struct wifiBssWpaTable_data_s {
    
        /*
         * wifiBssWpaAlgorithm(1)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   wifiBssWpaAlgorithm;
    
        /*
         * wifiBssWpaPreSharedKey(2)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/h
         */
   char   wifiBssWpaPreSharedKey[64];
size_t      wifiBssWpaPreSharedKey_len; /* # of char elements, not bytes */
    
        /*
         * wifiBssWpaGroupRekeyInterval(3)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   wifiBssWpaGroupRekeyInterval;
    
} wifiBssWpaTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review wifiBssWpaTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef wifiBssWpaTable_data wifiBssWpaTable_undo_data;

/*
 * TODO:120:r: |-> Review wifiBssWpaTable mib index.
 * This structure is used to represent the index for wifiBssWpaTable.
 */
typedef struct wifiBssWpaTable_mib_index_s {

        /*
         * ifIndex(1)/InterfaceIndex/ASN_INTEGER/long(long)//l/A/w/e/R/d/H
         */
   long   ifIndex;


} wifiBssWpaTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review wifiBssWpaTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_wifiBssWpaTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review wifiBssWpaTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * wifiBssWpaTable_rowreq_ctx pointer.
 */
typedef struct wifiBssWpaTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_wifiBssWpaTable_IDX_LEN];
    
    wifiBssWpaTable_mib_index        tbl_idx;
    
    wifiBssWpaTable_data              data;
    wifiBssWpaTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to wifiBssWpaTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *wifiBssWpaTable_data_list;

} wifiBssWpaTable_rowreq_ctx;
#if 0
typedef struct wifiBssWpaTable_ref_rowreq_ctx_s {
    wifiBssWpaTable_rowreq_ctx *rowreq_ctx;
} wifiBssWpaTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int wifiBssWpaTable_pre_request(wifiBssWpaTable_registration * user_context);
    int wifiBssWpaTable_post_request(wifiBssWpaTable_registration * user_context,
        int rc);

    int wifiBssWpaTable_rowreq_ctx_init(wifiBssWpaTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void wifiBssWpaTable_rowreq_ctx_cleanup(wifiBssWpaTable_rowreq_ctx *rowreq_ctx);

    int wifiBssWpaTable_commit(wifiBssWpaTable_rowreq_ctx * rowreq_ctx);

    wifiBssWpaTable_rowreq_ctx *
                  wifiBssWpaTable_row_find_by_mib_index(wifiBssWpaTable_mib_index *mib_idx);

extern const oid wifiBssWpaTable_oid[];
extern const int wifiBssWpaTable_oid_size;


#include "wifiBssWpaTable_interface.h"
#include "wifiBssWpaTable_data_access.h"
#include "wifiBssWpaTable_data_get.h"
#endif
#include "wifiBssWpaTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* WIFIBSSWPATABLE_H */
/** @} */
