/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef IFTABLE_H
#define IFTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>
#if 0
/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(RFC1213-MIB)
config_require(RFC1213-MIB/ifTable/ifTable_interface)
config_require(RFC1213-MIB/ifTable/ifTable_data_access)
config_require(RFC1213-MIB/ifTable/ifTable_data_get)
config_require(RFC1213-MIB/ifTable/ifTable_data_set)
    /* *INDENT-ON*  */
#endif
/* OID and column number definitions for ifTable */
#include "ifTable_oids.h"

/* enum definions */
#include "ifTable_enums.h"
#if 0
/* *********************************************************************
 * function declarations
 */
void init_ifTable(void);
void shutdown_ifTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table ifTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * RFC1213-MIB::ifTable is subid 2 of interfaces.
 * Its status is Mandatory.
 * OID: .1.3.6.1.2.1.2.2, length: 8
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review ifTable registration context.
     */
typedef netsnmp_data_list ifTable_registration;
#endif
/**********************************************************************/
/*
 * TODO:110:r: |-> Review ifTable data context structure.
 * This structure is used to represent the data for ifTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * ifTable.
 */
typedef struct ifTable_data_s {
    
        /*
         * ifDescr(2)/DisplayString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/h
         */
   char   ifDescr[32];
size_t      ifDescr_len; /* # of char elements, not bytes */
    
        /*
         * ifType(3)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   ifType;
    
        /*
         * ifMtu(4)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   ifMtu;
    
        /*
         * ifSpeed(5)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifSpeed;
    
        /*
         * ifPhysAddress(6)/PhysAddress/ASN_OCTET_STR/char(char)//L/A/W/e/r/d/h
         */
   char   ifPhysAddress[32];
size_t      ifPhysAddress_len; /* # of char elements, not bytes */
    
        /*
         * ifAdminStatus(7)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   ifAdminStatus;
    
        /*
         * ifOperStatus(8)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   ifOperStatus;
    
        /*
         * ifLastChange(9)/TICKS/ASN_TIMETICKS/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifLastChange;
    
        /*
         * ifInOctets(10)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifInOctets;
    
        /*
         * ifInUcastPkts(11)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifInUcastPkts;
    
        /*
         * ifInNUcastPkts(12)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifInNUcastPkts;
    
        /*
         * ifInDiscards(13)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifInDiscards;
    
        /*
         * ifInErrors(14)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifInErrors;
    
        /*
         * ifInUnknownProtos(15)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifInUnknownProtos;
    
        /*
         * ifOutOctets(16)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifOutOctets;
    
        /*
         * ifOutUcastPkts(17)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifOutUcastPkts;
    
        /*
         * ifOutNUcastPkts(18)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifOutNUcastPkts;
    
        /*
         * ifOutDiscards(19)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifOutDiscards;
    
        /*
         * ifOutErrors(20)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifOutErrors;
    
        /*
         * ifOutQLen(21)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   ifOutQLen;
    
        /*
         * ifSpecific(22)/OBJECTID/ASN_OBJECT_ID/oid(oid)//L/A/W/e/r/d/h
         */
   oid   ifSpecific[128];
size_t      ifSpecific_len; /* # of oid elements, not bytes */
    
} ifTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review ifTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef ifTable_data ifTable_undo_data;

/*
 * TODO:120:r: |-> Review ifTable mib index.
 * This structure is used to represent the index for ifTable.
 */
typedef struct ifTable_mib_index_s {

        /*
         * ifIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   ifIndex;


} ifTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review ifTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_ifTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review ifTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * ifTable_rowreq_ctx pointer.
 */
typedef struct ifTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_ifTable_IDX_LEN];
    
    ifTable_mib_index        tbl_idx;
    
    ifTable_data              data;
    ifTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to ifTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *ifTable_data_list;

} ifTable_rowreq_ctx;

typedef struct ifTable_ref_rowreq_ctx_s {
    ifTable_rowreq_ctx *rowreq_ctx;
} ifTable_ref_rowreq_ctx;
#if 0
/* *********************************************************************
 * function prototypes
 */
    int ifTable_pre_request(ifTable_registration * user_context);
    int ifTable_post_request(ifTable_registration * user_context,
        int rc);

    int ifTable_commit(ifTable_rowreq_ctx * rowreq_ctx);

    ifTable_rowreq_ctx *
                  ifTable_row_find_by_mib_index(ifTable_mib_index *mib_idx);

extern const oid ifTable_oid[];
extern const int ifTable_oid_size;


#include "ifTable_interface.h"
#include "ifTable_data_access.h"
#include "ifTable_data_get.h"
#endif
#include "ifTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* IFTABLE_H */
/** @} */
