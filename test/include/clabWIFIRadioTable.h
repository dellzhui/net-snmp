/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef CLABWIFIRADIOTABLE_H
#define CLABWIFIRADIOTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>
#if 0
/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(CLAB-WIFI-MIB)
config_require(CLAB-WIFI-MIB/clabWIFIRadioTable/clabWIFIRadioTable_interface)
config_require(CLAB-WIFI-MIB/clabWIFIRadioTable/clabWIFIRadioTable_data_access)
config_require(CLAB-WIFI-MIB/clabWIFIRadioTable/clabWIFIRadioTable_data_get)
config_require(CLAB-WIFI-MIB/clabWIFIRadioTable/clabWIFIRadioTable_data_set)
    /* *INDENT-ON*  */
#endif
/* OID and column number definitions for clabWIFIRadioTable */
#include "clabWIFIRadioTable_oids.h"

/* enum definions */
#include "clabWIFIRadioTable_enums.h"
#if 0
/* *********************************************************************
 * function declarations
 */
void init_clabWIFIRadioTable(void);
void shutdown_clabWIFIRadioTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table clabWIFIRadioTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * CLAB-WIFI-MIB::clabWIFIRadioTable is subid 2 of clabWIFIObjects.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.4491.2.5.1.1.2, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review clabWIFIRadioTable registration context.
     */
typedef netsnmp_data_list clabWIFIRadioTable_registration;
#endif
/**********************************************************************/
/*
 * TODO:110:r: |-> Review clabWIFIRadioTable data context structure.
 * This structure is used to represent the data for clabWIFIRadioTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * clabWIFIRadioTable.
 */
typedef struct clabWIFIRadioTable_data_s {
    
        /*
         * clabWIFIRadioEnable(2)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   clabWIFIRadioEnable;
    
        /*
         * clabWIFIRadioStatus(3)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   clabWIFIRadioStatus;
    
        /*
         * clabWIFIRadioAlias(4)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   clabWIFIRadioAlias[64];
size_t      clabWIFIRadioAlias_len; /* # of char elements, not bytes */
    
        /*
         * clabWIFIRadioName(5)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   clabWIFIRadioName[64];
size_t      clabWIFIRadioName_len; /* # of char elements, not bytes */
    
        /*
         * clabWIFIRadioLastChange(6)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   clabWIFIRadioLastChange;
    
        /*
         * clabWIFIRadioLowerLayers(7)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   clabWIFIRadioLowerLayers[64];
size_t      clabWIFIRadioLowerLayers_len; /* # of char elements, not bytes */
    
        /*
         * clabWIFIRadioUpstream(8)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   clabWIFIRadioUpstream;
    
        /*
         * clabWIFIRadioMaxBitRate(9)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   clabWIFIRadioMaxBitRate;
    
        /*
         * clabWIFIRadioSupportedFrequencyBands(10)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   clabWIFIRadioSupportedFrequencyBands[32];
size_t      clabWIFIRadioSupportedFrequencyBands_len; /* # of char elements, not bytes */
    
        /*
         * clabWIFIRadioOperatingFrequencyBand(11)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   clabWIFIRadioOperatingFrequencyBand;
    
        /*
         * clabWIFIRadioSupportedStandards(12)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   clabWIFIRadioSupportedStandards[32];
size_t      clabWIFIRadioSupportedStandards_len; /* # of char elements, not bytes */
    
        /*
         * clabWIFIRadioOperatingStandards(13)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   clabWIFIRadioOperatingStandards;
    
        /*
         * clabWIFIRadioPossibleChannels(14)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   clabWIFIRadioPossibleChannels[64];
size_t      clabWIFIRadioPossibleChannels_len; /* # of char elements, not bytes */
    
        /*
         * clabWIFIRadioChannelsInUse(15)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   clabWIFIRadioChannelsInUse[64];
size_t      clabWIFIRadioChannelsInUse_len; /* # of char elements, not bytes */
    
        /*
         * clabWIFIRadioChannel(16)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/R/d/h
         */
   u_long   clabWIFIRadioChannel;
    
        /*
         * clabWIFIRadioAutoChannelSupported(17)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   clabWIFIRadioAutoChannelSupported;
    
        /*
         * clabWIFIRadioAutoChannelEnable(18)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   clabWIFIRadioAutoChannelEnable;
    
        /*
         * clabWIFIRadioAutoChannelRefreshPeriod(19)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   clabWIFIRadioAutoChannelRefreshPeriod;
    
        /*
         * clabWIFIRadioOperatingChannelBandwidth(20)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/D/h
         */
   u_long   clabWIFIRadioOperatingChannelBandwidth;
    
        /*
         * clabWIFIRadioExtensionChannel(21)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/D/h
         */
   u_long   clabWIFIRadioExtensionChannel;
    
        /*
         * clabWIFIRadioGuardInterval(22)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/D/h
         */
   u_long   clabWIFIRadioGuardInterval;
    
        /*
         * clabWIFIRadioMCS(23)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   clabWIFIRadioMCS;
    
        /*
         * clabWIFIRadioTransmitPowerSupported(24)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   clabWIFIRadioTransmitPowerSupported[64];
size_t      clabWIFIRadioTransmitPowerSupported_len; /* # of char elements, not bytes */
    
        /*
         * clabWIFIRadioTransmitPower(25)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/R/d/h
         */
   u_long   clabWIFIRadioTransmitPower;
    
        /*
         * clabWIFIRadioIEEE80211hSupported(26)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   clabWIFIRadioIEEE80211hSupported;
    
        /*
         * clabWIFIRadioIEEE80211hEnabled(27)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   clabWIFIRadioIEEE80211hEnabled;
    
        /*
         * clabWIFIRadioRegulatoryDomain(28)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
         */
   char   clabWIFIRadioRegulatoryDomain[32];
size_t      clabWIFIRadioRegulatoryDomain_len; /* # of char elements, not bytes */
    
        /*
         * clabWIFIRadioNoncontiguousChannel(29)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/R/d/h
         */
   u_long   clabWIFIRadioNoncontiguousChannel;
    
        /*
         * clabWIFIRadioCarrierSenseThresholdInUse(30)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   clabWIFIRadioCarrierSenseThresholdInUse;
    
        /*
         * clabWIFIRadioCarrierSenseThresholdRange(31)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   clabWIFIRadioCarrierSenseThresholdRange;
    
        /*
         * clabWIFIRadioStatsChanUtilization(32)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   clabWIFIRadioStatsChanUtilization;
    
        /*
         * clabWIFIRadioRtsCtsExchange(33)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   clabWIFIRadioRtsCtsExchange;
    
        /*
         * clabWIFIRadioFrameAggregationLevel(34)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   clabWIFIRadioFrameAggregationLevel;
    
        /*
         * clabWIFIRadioThroughput(35)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
         */
   u_long   clabWIFIRadioThroughput;
    
        /*
         * clabWIFIRadioPktErrorRateSTA(36)/PktErrorRateType/ASN_INTEGER/long(long)//l/A/W/e/r/d/H
         */
   long   clabWIFIRadioPktErrorRateSTA;
    
} clabWIFIRadioTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review clabWIFIRadioTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef clabWIFIRadioTable_data clabWIFIRadioTable_undo_data;

/*
 * TODO:120:r: |-> Review clabWIFIRadioTable mib index.
 * This structure is used to represent the index for clabWIFIRadioTable.
 */
typedef struct clabWIFIRadioTable_mib_index_s {

        /*
         * clabWIFIRadioId(1)/InterfaceIndex/ASN_INTEGER/long(long)//l/a/w/e/R/d/H
         */
   long   clabWIFIRadioId;


} clabWIFIRadioTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review clabWIFIRadioTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_clabWIFIRadioTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review clabWIFIRadioTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * clabWIFIRadioTable_rowreq_ctx pointer.
 */
typedef struct clabWIFIRadioTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_clabWIFIRadioTable_IDX_LEN];
    
    clabWIFIRadioTable_mib_index        tbl_idx;
    
    clabWIFIRadioTable_data              data;
    clabWIFIRadioTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to clabWIFIRadioTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *clabWIFIRadioTable_data_list;

} clabWIFIRadioTable_rowreq_ctx;
#if 0
typedef struct clabWIFIRadioTable_ref_rowreq_ctx_s {
    clabWIFIRadioTable_rowreq_ctx *rowreq_ctx;
} clabWIFIRadioTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int clabWIFIRadioTable_pre_request(clabWIFIRadioTable_registration * user_context);
    int clabWIFIRadioTable_post_request(clabWIFIRadioTable_registration * user_context,
        int rc);

    int clabWIFIRadioTable_rowreq_ctx_init(clabWIFIRadioTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void clabWIFIRadioTable_rowreq_ctx_cleanup(clabWIFIRadioTable_rowreq_ctx *rowreq_ctx);

    int clabWIFIRadioTable_commit(clabWIFIRadioTable_rowreq_ctx * rowreq_ctx);

    clabWIFIRadioTable_rowreq_ctx *
                  clabWIFIRadioTable_row_find_by_mib_index(clabWIFIRadioTable_mib_index *mib_idx);

extern const oid clabWIFIRadioTable_oid[];
extern const int clabWIFIRadioTable_oid_size;


#include "clabWIFIRadioTable_interface.h"
#include "clabWIFIRadioTable_data_access.h"
#include "clabWIFIRadioTable_data_get.h"
#endif
#include "clabWIFIRadioTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* CLABWIFIRADIOTABLE_H */
/** @} */
